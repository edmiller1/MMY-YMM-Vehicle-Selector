{"version":3,"sources":["util/api.js","Selector.js","util/useData.js","App.js","reportWebVitals.js","index.js"],"names":["getApi","query","variables","fetch","method","headers","body","JSON","stringify","then","response","json","Selector","currentCarMake","useState","years","setYears","carMakes","setCarMakes","carModels","setCarModels","fetchYears","data","uvdb","search_uvdb_years","items","fetchCarMakes","search_uvdb_makes","fetchCarModels","makeId","search_uvdb_models","useData","isSwitched","setIsSwitched","isYearDisabled","setIsYearDisabled","isMakeDisabled","setIsMakeDisabled","isModelDisabled","setIsModelDisabled","fillCarModels","e","a","target","value","setTimeout","useEffect","modelLength","length","className","defaultValue","hidden","map","m","id","selected","name","disabled","switchedUI","onChange","y","onClick","console","log","App","style","height","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aabbda79.chunk.js","sourcesContent":["/*\n  A function that sets up a connection to a graphql API endpoint. \n  It has a query parameter that will allow an functions to query the specific data it needs\n  as well as use any variables that it may require as well\n*/\nexport const getApi = (query, variables) => {\n  return fetch(\"https://api.partly.com/node-api/graphql\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      query: query,\n      variables: variables,\n    }),\n  }).then((response) => response.json());\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useData } from \"./util/useData\";\n\nexport const Selector = () => {\n  let currentCarMake = \"\";\n  const {\n    years,\n    carMakes,\n    carModels,\n    setCarModels,\n    fetchYears,\n    fetchCarMakes,\n    fetchCarModels,\n  } = useData();\n\n  //State\n  const [isSwitched, setIsSwitched] = useState(false);\n  const [isYearDisabled, setIsYearDisabled] = useState(true);\n  const [isMakeDisabled, setIsMakeDisabled] = useState(true);\n  const [isModelDisabled, setIsModelDisabled] = useState(true);\n\n  //Functions\n\n  //Switches UI from YMM to MMY\n  const switchUi = () => {\n    console.log(\"isSwitched: \", isSwitched);\n    setIsSwitched(!isSwitched);\n    setCarModels([]);\n    if (isSwitched === true) {\n      setIsYearDisabled(true);\n      setIsModelDisabled(true);\n    }\n  };\n\n  const changeIsYearDisabled = () => {\n    setIsYearDisabled(false);\n  };\n\n  //Changes the Make select tag to enabled\n  const changeIsMakeDisabled = () => {\n    setIsMakeDisabled(false);\n  };\n\n  //Changes the Model select tag to enabled\n  const changeIsModelDisabled = () => {\n    setIsModelDisabled(false);\n  };\n\n  //Fills the Model select tag with the model data based on the current Make selected\n  const fillCarModels = async (e) => {\n    currentCarMake = e.target.value;\n    await fetchCarModels(currentCarMake);\n    changeIsModelDisabled();\n    setTimeout(() => {\n      changeIsYearDisabled();\n    }, 1500);\n  };\n\n  //Fetches the Years and Car Manufacturers\n  useEffect(() => {\n    fetchYears();\n    fetchCarMakes();\n  }, []);\n\n  /* \n    Checks whether the model array contains only 1 element. If so then it auto selects the model of vehicle.\n    If not then it will just show the models of the vehicle make chosen.\n  */\n  const modelLength =\n    carModels.length === 1 ? (\n      <select className=\"w-40 border-2 border-gray-400 py-2 rounded-lg mx-5\">\n        <option defaultValue hidden>\n          Model\n        </option>\n        {carModels.map((m) => (\n          <option key={m.id} value={m.id} selected>\n            {m.name}\n          </option>\n        ))}\n      </select>\n    ) : (\n      <select\n        disabled={isModelDisabled}\n        className=\"w-40 border-2 border-gray-400 py-2 rounded-lg mx-5\"\n      >\n        <option defaultValue hidden>\n          Model\n        </option>\n        {carModels.map((m) => (\n          <option key={m.id} value={m.id}>\n            {m.name}\n          </option>\n        ))}\n      </select>\n    );\n\n  /*\n    Displays the UI as YMM or MMY depending on the truthy value 'isSwitched'\n  */\n  const switchedUI = isSwitched ? (\n    <div>\n      <select\n        onChange={changeIsMakeDisabled}\n        className=\"w-40 border-2 border-gray-400 py-2 rounded-lg mx-5\"\n      >\n        <option defaultValue hidden>\n          Year\n        </option>\n        {years.map((y) => (\n          <option key={y.id}>{y.id}</option>\n        ))}\n      </select>\n      <select\n        disabled={isMakeDisabled}\n        onChange={(e) => fillCarModels(e)}\n        className=\"w-40 border-2 border-gray-400 py-2 rounded-lg mx-5\"\n      >\n        <option hidden>Make</option>\n        {carMakes.map((m) => (\n          <option value={m.id} key={m.id}>\n            {m.name}\n          </option>\n        ))}\n      </select>\n      {modelLength}\n    </div>\n  ) : (\n    <div>\n      <select\n        onChange={(e) => fillCarModels(e)}\n        className=\"w-40 border-2 border-gray-400 py-2 rounded-lg mx-5\"\n      >\n        <option hidden>Make</option>\n        {carMakes.map((m) => (\n          <option value={m.id} key={m.id}>\n            {m.name}\n          </option>\n        ))}\n      </select>\n      {modelLength}\n      <select\n        disabled={isYearDisabled}\n        className=\"w-40 border-2 border-gray-400 py-2 rounded-lg mx-5\"\n      >\n        <option defaultValue hidden>\n          Year\n        </option>\n        {years.map((y) => (\n          <option key={y.id}>{y.id}</option>\n        ))}\n      </select>\n    </div>\n  );\n\n  return (\n    <div>\n      <h1 className=\"flex justify-center mb-20 text-5xl\">\n        üîç MMY/YMM Vehicle Selector\n      </h1>\n      <div className=\"ml-5\">\n        <h1 className=\"mb-5 font-bold text-xl\">Choose your vehicle</h1>\n      </div>\n      <div className=\"flex\">\n        {switchedUI}\n        <button\n          onClick={switchUi}\n          className=\"bg-indigo-700 text-white px-3 py-2 rounded-lg hover:bg-indigo-600 transition-all\"\n        >\n          Switch\n        </button>\n      </div>\n    </div>\n  );\n};\n","import { useState } from \"react\";\nimport { getApi } from \"./api\";\n\nexport const useData = () => {\n  //Data\n  const [years, setYears] = useState([]);\n  const [carMakes, setCarMakes] = useState([]);\n  const [carModels, setCarModels] = useState([]);\n\n  //Fetches the Years from the graphql API\n  const fetchYears = () => {\n    getApi(`query {\n      uvdb {\n        search_uvdb_years {\n          items {\n            id\n          }\n        }\n      }\n    }`).then((data) => {\n      setYears(data.data.uvdb.search_uvdb_years.items);\n    });\n  };\n\n  //Fetches the car makes from the graphql API\n  const fetchCarMakes = () => {\n    getApi(`query {\n      uvdb {\n        search_uvdb_makes(limit: 534) {\n          items {\n            id\n            name\n          }\n        }\n      }\n    }`).then((data) => {\n      setCarMakes(data.data.uvdb.search_uvdb_makes.items);\n    });\n  };\n\n  //Fetches the car models from the graphql API dpending on the car make ID passed in as a parameter\n  const fetchCarModels = (makeId) => {\n    getApi(\n      `  query getModels($makeId: ID!) {\n      uvdb {\n        search_uvdb_models(uvdb_make_id: $makeId ) {\n          items {\n            id\n            name\n          }\n        }\n      }\n    }`,\n      { makeId: makeId }\n    ).then((data) => {\n      setCarModels(data.data.uvdb.search_uvdb_models.items);\n    });\n  };\n\n  return {\n    years,\n    carMakes,\n    carModels,\n    setCarModels,\n    fetchYears,\n    fetchCarMakes,\n    fetchCarModels,\n  };\n};\n","import { Selector } from \"./Selector\";\n\nfunction App() {\n  return (\n    <div\n      className=\"flex justify-center items-center\"\n      style={{ height: \"100vh\" }}\n    >\n      <Selector />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}