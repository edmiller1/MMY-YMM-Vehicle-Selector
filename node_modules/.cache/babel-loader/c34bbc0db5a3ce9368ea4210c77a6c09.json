{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { getApi } from \"./api\";\nexport const useFetch = (query, variables) => {\n  _s();\n\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    fetch(\"https://api.partly.com/node-api/graphql\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        query: query,\n        variables: variables\n      })\n    }).then(response => response.json()).then(data => {\n      setData(data.data);\n    });\n  }, [query, variables]);\n  return [data];\n};\n\n_s(useFetch, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");","map":{"version":3,"sources":["/Users/edwardmiller/Documents/React/vehicle-selector/src/util/lib.js"],"names":["useEffect","useState","getApi","useFetch","query","variables","data","setData","fetch","method","headers","body","JSON","stringify","then","response","json"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,OAAvB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,SAAR,KAAsB;AAAA;;AAC5C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,IAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,KAAK,CAAC,yCAAD,EAA4C;AAC/CC,MAAAA,MAAM,EAAE,MADuC;AAE/CC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFsC;AAG/CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBT,QAAAA,KAAK,EAAEA,KADY;AAEnBC,QAAAA,SAAS,EAAEA;AAFQ,OAAf;AAHyC,KAA5C,CAAL,CAQGS,IARH,CAQSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EARtB,EASGF,IATH,CASSR,IAAD,IAAU;AACdC,MAAAA,OAAO,CAACD,IAAI,CAACA,IAAN,CAAP;AACD,KAXH;AAYD,GAbQ,EAaN,CAACF,KAAD,EAAQC,SAAR,CAbM,CAAT;AAeA,SAAO,CAACC,IAAD,CAAP;AACD,CAnBM;;GAAMH,Q","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { getApi } from \"./api\";\n\nexport const useFetch = (query, variables) => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    fetch(\"https://api.partly.com/node-api/graphql\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        query: query,\n        variables: variables,\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        setData(data.data);\n      });\n  }, [query, variables]);\n\n  return [data];\n};\n"]},"metadata":{},"sourceType":"module"}